{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNo1/a1DqpflGsPRqMNqunV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/apesoujirou/sampling2/blob/main/sr_converter.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        },
        "id": "m4vsQVfNP8Lu",
        "outputId": "b803cd83-01f0-4070-b638-ede45419b59a"
      },
      "source": [
        "# -*- coding:utf-8 -*-\n",
        "import os\n",
        "import wave\n",
        "import struct\n",
        "import argparse\n",
        "from typing import Tuple\n",
        "\n",
        "import numpy as np\n",
        "import scipy.signal\n",
        "\n",
        "\n",
        "def get_args() -> argparse.Namespace:\n",
        "    \"\"\"引数取得\n",
        "\n",
        "    Returns:\n",
        "        argparse.Namespace: 引数情報\n",
        "    \"\"\"\n",
        "    parser = argparse.ArgumentParser(\n",
        "        prog=\"sr_converter.py\", usage=\"convert samplingrate\",\n",
        "        add_help=True\n",
        "    )\n",
        "    parser.add_argument(\"input\", type=str, help=\"input wav file path\")\n",
        "    parser.add_argument(\"output_dir\", type=str, help=\"output dir path\")\n",
        "    parser.add_argument(\n",
        "        \"--up\", type=int, default=None, help=\"up conversion rate: int\"\n",
        "    )\n",
        "    parser.add_argument(\n",
        "        \"--down\", type=int, default=None, help=\"down conversion rate: int\"\n",
        "    )\n",
        "    return parser.parse_args()\n",
        "\n",
        "\n",
        "def read_wav(filename: str) -> Tuple[np.array, int]:\n",
        "    \"\"\"wavファイルを読み込んで，データ・サンプリングレートを返す関数\n",
        "\n",
        "    Args:\n",
        "        filename (str): wavファイルパス\n",
        "\n",
        "    Returns:\n",
        "        Tuple[np.array, int]: (信号データ, サンプリングレート)\n",
        "    \"\"\"\n",
        "    try:\n",
        "        wf = wave.open(filename)\n",
        "        fs = wf.getframerate()\n",
        "        # -1 ~ 1までに正規化した信号データを読み込む\n",
        "        data = np.frombuffer(wf.readframes(wf.getnframes()), dtype=\"int16\") / 32768.0\n",
        "        return (data, fs)\n",
        "    except Exception as e:\n",
        "        print(e)\n",
        "        exit()\n",
        "\n",
        "\n",
        "def write_wav(filename: str, data: np.array, fs: int) -> None:\n",
        "    \"\"\"入力されたファイル名でwavファイルを書き出す．\n",
        "\n",
        "    Args:\n",
        "        filename (str): 出力ファイルパス\n",
        "        data (np.array): 信号データ\n",
        "        fs (int): サンプリングレート\n",
        "    \"\"\"\n",
        "    # データを-32768から32767の整数値に変換\n",
        "    data = [int(x * 32767.0) for x in data]\n",
        "    # バイナリ化\n",
        "    binwave = struct.pack(\"h\" * len(data), *data)\n",
        "    wf = wave.Wave_write(filename)\n",
        "    params = (\n",
        "        1,                          # channel\n",
        "        2,                          # byte width\n",
        "        fs,                         # sampling rate\n",
        "        len(data),                  # number of frames\n",
        "        \"NONE\", \"not compressed\"    # no compression\n",
        "    )\n",
        "    wf.setparams(params)\n",
        "    wf.writeframes(binwave)\n",
        "    wf.close()\n",
        "\n",
        "\n",
        "def upsampling(conversion_rate: int, data: np.array, fs: int) -> Tuple[np.array, int]:\n",
        "    \"\"\"アップサンプリングを行う．\n",
        "       入力として，変換レートとデータとサンプリング周波数．\n",
        "       アップサンプリング後のデータとサンプリング周波数を返す．\n",
        "\n",
        "    Args:\n",
        "        conversion_rate (int): 変換レート\n",
        "        data (np.array): 信号データ\n",
        "        fs (int): サンプリングレート\n",
        "\n",
        "    Returns:\n",
        "        Tuple[np.array, int]: 変換後の信号データとサンプリングレート\n",
        "    \"\"\"\n",
        "    # 補間するサンプル数を決める\n",
        "    interpolation_sample_num = conversion_rate-1\n",
        "\n",
        "    # FIRフィルタの用意をする\n",
        "    nyqF = (fs*conversion_rate)/2.0     # 変換後のナイキスト周波数\n",
        "    cF = (fs/2.0-500.)/nyqF             # カットオフ周波数を設定（変換前のナイキスト周波数より少し下を設定）\n",
        "    taps = 511                          # フィルタ係数（奇数じゃないとだめ）\n",
        "    b = scipy.signal.firwin(taps, cF)   # LPFを用意\n",
        "\n",
        "    # 補間処理\n",
        "    up_data = []\n",
        "    for d in data:\n",
        "        up_data.append(d)\n",
        "        # 1サンプルの後に，interpolation_sample_num分だけ0を追加する\n",
        "        for i in range(interpolation_sample_num):\n",
        "            up_data.append(0.0)\n",
        "\n",
        "    # フィルタリング\n",
        "    result_data = scipy.signal.lfilter(b, 1, up_data)\n",
        "    return (result_data, int(fs*conversion_rate))\n",
        "\n",
        "\n",
        "def downsampling(conversion_rate: int, data: np.array, fs: int) -> Tuple[np.array, int]:\n",
        "    \"\"\"ダウンサンプリングを行う．\n",
        "    入力として，変換レートとデータとサンプリング周波数．\n",
        "    アップサンプリング後のデータとサンプリング周波数を返す．\n",
        "\n",
        "    Args:\n",
        "        conversion_rate (int): 変換レート\n",
        "        data (np.array): 信号データ\n",
        "        fs (int): サンプリングレート\n",
        "\n",
        "    Returns:\n",
        "        Tuple[np.array, int]: 変換後の信号データとサンプリングレート\n",
        "    \"\"\"\n",
        "    # 間引くサンプル数を決める\n",
        "    decimation_sampleNum = conversion_rate-1\n",
        "\n",
        "    # FIRフィルタの用意をする\n",
        "    nyqF = (fs/conversion_rate)/2.0             # 変換後のナイキスト周波数\n",
        "    cF = (fs/conversion_rate/2.0-500.)/nyqF     # カットオフ周波数を設定（変換前のナイキスト周波数より少し下を設定）\n",
        "    taps = 511                                  # フィルタ係数（奇数じゃないとだめ）\n",
        "    b = scipy.signal.firwin(taps, cF)           # LPFを用意\n",
        "\n",
        "    # フィルタリング\n",
        "    data = scipy.signal.lfilter(b, 1, data)\n",
        "\n",
        "    # 間引き処理\n",
        "    down_data = []\n",
        "    for i in range(0, len(data), decimation_sampleNum+1):\n",
        "        down_data.append(data[i])\n",
        "\n",
        "    return (down_data, int(fs/conversion_rate))\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    args = get_args()\n",
        "\n",
        "    # テストwavファイルを読み込む\n",
        "    data, fs = read_wav(args.input)\n",
        "\n",
        "    if not os.path.exists(args.output_dir):\n",
        "        os.makedirs(args.output_dir)\n",
        "\n",
        "    base_file_name = os.path.splitext(os.path.basename(args.input))[0]\n",
        "\n",
        "    if args.up is not None:\n",
        "        up_data, up_fs = upsampling(args.up, data, fs)\n",
        "        write_wav(\n",
        "            os.path.join(args.output_dir, base_file_name + \"_up.wav\"),\n",
        "            up_data, up_fs\n",
        "        )\n",
        "\n",
        "    if args.down is not None:\n",
        "        down_data, down_fs = downsampling(args.down, data, fs)\n",
        "        write_wav(\n",
        "            os.path.join(args.output_dir, base_file_name + \"_down.wav\"),\n",
        "            down_data, down_fs\n",
        "        )"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "usage: convert samplingrate\n",
            "sr_converter.py: error: the following arguments are required: output_dir\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "SystemExit",
          "evalue": "ignored",
          "traceback": [
            "An exception has occurred, use %tb to see the full traceback.\n",
            "\u001b[0;31mSystemExit\u001b[0m\u001b[0;31m:\u001b[0m 2\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2890: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
            "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
          ]
        }
      ]
    }
  ]
}